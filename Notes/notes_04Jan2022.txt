Topics learned so far;
Access specifier
Constructors
Overloading
static
this
final
enum
---------------------------
we continue from:
Exploring Java Basics
o	The Object Class 
o	 Wrapper Classes 
o	 Type casting 
o	Using Scanner Class                               
o	 String Handling 
o	Date and Time API 
o	 Best Practices

----------------------------------------------------------

	
in examination, some portion of the code is already given.
mostly, all imports are done already
But it is better to be aware of the imports to be done for any class/interface

every problem statement at the last mention the time allowed	10 seconds

reverse order
	ListIterator
		moved to last
		empty for loop
		previous

	move using index
	size()-1


------------------------------------------------------------
Date and Time API 
----------------------------
an user enters the date as a String input

How we can represent it in variable?
disadvantages of keeping a date in a String variable:
	it will allow 31-Feb-2023
	
there are some valid date literals
	2023-02-01	most commonly used format		HTML5 <input type="date" /> gives you 
			mysql

	01-Feb-23

	08-09-2000		no clarity		

While asking input, can we guide the user to enter in a particular format:
	Enter your Date of Birth(dd/MM/yyyy):

or we can provide date picker		<input type="date" />

java.util.Date		Date class

Date dt1=new Date();		the constructor of Date class fills current system date

How to convert a String into Date?

Date.parse(str);		//	yyyy/MM/dd

long result = Date.parse("2023/08/01");
		Date dt=new Date(result);
		System.out.println(dt);

suppose, if user enters date in other formats?		not any format.
how can we convert that string into date?

To simply convert String to Date and vice versa,
we can use
	SimpleDateFormat
		parse		converts String to Date
		format		converts Date to String

Learn the symbols used in date format
d		1 digit day		if you use only "d"		it will show 1 as 1 and 12 is shown as 12 only
dd		2 digit day		1 is shown as 01
MM		2 digit month
MMM		3 letter month		Feb		Mar
MMMM		full month		February
yy
yyyy
EEEE		EEE		Mon	Tue
		EEEE		full week day
mm		minutes
AM		AM / PM 		based on value

Task:
	Identify as many symbols in Date Format



Every date is a millisecond started from 1970 Jan 1st and ticks every milliseconds

1) Find the age based on date of birth and current date
2) Find the number of months between 2 dates
3) Find if an year is leap year or not
4) Find when is the next friday coming
5) Find the policy maturity date
	start date + number of years


1) Find the age based on date of birth and current date

	
Accept a String input from the user (date of birth)
convert it into Date 

based on today's date, find the age and display in 
	You are 10 years, 8 months, 7 days old



class Date
{
	day
	month
	year

}

java version upto 1.4
there was no LocalDate

long - long

/1000
/60
/60
/24
/30
months

jdk 1.5
	LocalDate

Period.between(ld1, ld2)

class Period
{
	days
	months
	years

}

2016	is not divisible by 400	but leap year


		GregorianCalendar gc=new GregorianCalendar();		
		System.out.println(gc.isLeapYear(2004));

-128 to 127

1900	1970	
------------------------
1) Find the age based on date of birth and current date
2) Find the number of months between 2 dates
3) Find if an year is leap year or not
4) Find when is the next friday coming
5) Find the policy maturity date
	start date + number of years

----------------------------------------------------------------------------

3 programming questions

1) String
2) Exception handling
3) Collections

Generics and Collections
o	Overriding hashCode() and equals()
o	Overriding equals()
o	Overriding hashCode()
o	Collections
o	So What Do You Do with a Collection?
o	List Interface
o	Set Interface
o	Map Interface
o	Queue Interface
o	Using the Collections Framework
o	ArrayList Basics
o	Autoboxing with Collections
o	Sorting Collections and Arrays
o	Navigating (Searching) TreeSets and TreeMaps
o	Other Navigation Methods
o	Backed Collections
o	Generic Types
o	Generics and Legacy Code
o	Mixing Generic and Non-generic Collections
o	Polymorphism and Generics

---------------------------

Arrays
----------
in C, C++ the arrays syntax is different
	int arr[10];

but in java, we cannot do like that:
we need to do this in 2 steps
	int arr[]=new int[10];

we can do this in multiple steps also:
	int arr[];		//define the type	int type	 and a single dimension array
	arr=new int[10];	//size the array	10 int memory locations are allocated

multi dimensional arrays:

	int arr[][]=new int[10][];		//why 2nd dimension is blank, it can be blank or it can be mentioned

if you leave the last dimension blank, then it is "Jagged" array
Means, every row, can have different number of columns


		int arr[][]=new int[5][];
		arr[0]=new int[4];
		arr[1]=new int[6];
		arr[2]=new int[5];
		arr[3]=new int[5];
		arr[4]=new int[8];
		System.out.println(Arrays.deepToString(arr));



Arrays
	what do you know about array?
		homogenous collection. Only 1 type of data
		if array is of Object type, it looks like anything can be added. But every element we add is autoboxed to Object type. So array has only 1 type of element in itself.

User defined type array
	Employee class


A class name must
	be a noun
	start with capital letter. Every word first letter start with capital
	meaning ful
	entity	refers to a place or person or process 

	User
		validateLogin		doThis		verb+Noun



How can you sort an array?
	Arrays.sort(arr);

What is the limitation of Array?
	size of the array is fixed
	
Collections can grow or shrink (means, the size can be changed)
Difference between arrays and collections,

arrays can be primitive type also.
	int arr[];

but collections can be object type	(can be wrapper class type, or user defined type or Object type)
primitive type collection is not possible

Collections
	List
	Set
	Map		(application of collection)

Activity:
	understand the difference between these collection classes:

List interface 	is implemented by		allows duplicates
	ArrayList
	LinkedList

Set interface	reject duplicates
	HashSet
	TreeSet
	LinkedHashSet

Map
	HashSet
	TreeMap
	LinkedHashMap

Set		Set is a collection of distinct elements
	unique
Map
	key-value pair


Array is fixed size and if we use only few elements, remaining spaces are un utilized
linked list elements can be present anywhere, array elements are present in contigeous memory locations

List is ordered	order is not ascending or descending order. Order means, the order in which elements are added
Set is unordered	unordered means, every type of Set has an algorithm to decide the order of the elements
	LinkedHashSet	stores the elements in the order	(in which they are added)


List<Integer> is possible. But 	List<int> is not possible.

Date
String
Employee


jdk 1.5 generics were introduced. Before that	upto 1.4,

ArrayList marks=new ArrayList();			//this means, it is Object type. It is not type safe
ArrayList<Object> marks=new ArrayList<>();

in jdk 1.5 onwards


ArrayList<Integer> marks=new ArrayList<>();
this will allow only Integer type elements. Type safe collections.

Why it is called as Generics?
	While creating this class, they did not create for only Object type. They have created in such a way, we can create object, we can specify any type (not only Object)

ArrayList<T>


int arr[]=new int[10];
arr=new int[20];		// can we do this?		Yes, it is possible. But a new array is created.

TasK:
Identify the methods of ArrayList.

add(element);
add(index,element);
indexOf(object);
remove(object)
remove(index)
trimToSize
get(index)
contains()
